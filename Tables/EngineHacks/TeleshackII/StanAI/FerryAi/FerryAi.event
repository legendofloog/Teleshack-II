#ifndef FERRYAI_INCLUDED
#define FERRYAI_INCLUDED

// Ferrying Ai
// hack by Stan

// HOW IT WORKS:
// A unit with "Ferry Ai1" will seek (allied) units that are rescuing some other unit, and take that unit from them
// Once the ferry unit is rescuing a unit, they will seek the closest unobstructed "drop point" and try to drop their rescued unit there
// "drop points" are definied dynamically at runtime (it's stored in trap data). The following functions are provided to the user for that purpose:

/*
 * void FerryAddDropTile(int x, int y) :: registers drop tile at given coordinates
 * ASMC_AddFerryDropTile :: for use with ASMC: adds drop tile at coordinates in sB
 * ASMC_AddFerryDropTiles :: for use with ASMC: adds drop tiles given list of short pairs at address in s2 (list is terminated when x < 0)
 */

#ifndef AIPERFORMEXT_INCLUDED

  ERROR "FerryAi requires AiPerformExtension!"

#else

#ifndef FERRY_TAKE_PERFORM
  #define FERRY_TAKE_PERFORM 14
#endif // FERRY_TAKE_PERFORM

#ifndef FERRY_DROP_PERFORM
  #define FERRY_DROP_PERFORM 15
#endif

#ifndef FERRY_TRAP_ID
  #define FERRY_TRAP_ID 0xEF
#endif // FERRY_TRAP_ID

#ifndef FERRY_AI1
  #define FERRY_AI1 10
#endif // FERRY_AI1

gFerryTakePerformId: BYTE FERRY_TAKE_PERFORM
gFerryDropPerformId: BYTE FERRY_DROP_PERFORM

gFerryDataTrapId: BYTE FERRY_TRAP_ID

gFerryAi1: BYTE FERRY_AI1

#include "Src/FerryAi.lyn.event"

InjectAiPerformer(FERRY_TAKE_PERFORM, FerryPerformTake)
InjectAiPerformer(FERRY_DROP_PERFORM, FerryPerformDrop)

ALIGN 4
FerryAiScr:
{
	AiFunc(FerryCheckIsRescuing)
	AiGotoIfEQ(1, 0)
	AiGotoIfEQ(2, 1)
	AiRestart

AiLabel(1)
	AiFunc(FerryTryTakeInRangeOrMove)
	AiRestart

AiLabel(2)
	AiFunc(FerryTryDropInRangeOrMove)
	AiRestart

}

InjectAi1(FERRY_AI1, FerryAiScr)

#endif // AIPERFORMEXT_INCLUDED

#endif // FERRYAI_INCLUDED
