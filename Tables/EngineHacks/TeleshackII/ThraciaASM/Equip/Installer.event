
/////////////
//Equipment//
/////////////

#include "src/Equip.lyn.event"

// add prEquipmentBonus to each stat getter
#define rEquipmentBonus(stat) "rAdd; rWithConstant(stat); rCallExternal(GetEquipmentStatBonus^1)"

/*
add this to draw_stats_box in mss_defs after blh 0x80D74A0

ldr r0, [r6, #0xC]
blh DrawUnitEquippedItem

add this before .endm

b SkipPool
.ltorg
SkipPool:
*/

/*
add this to both skillTester and skillTester2

.equ GetEquipmentSkill, SkillGetter + 0xC

add this after mov r4, r1 @skill to test

mov r0, r5
ldr r3, GetEquipmentSkill
_blr r3
cmp r0, r4
beq True
mov r0, r5
nop // for alignment

add POIN GetEquipmentSkill to both skillTesterOriginal lit pools in Internals/SkillSystem.event
*/

/*
Add POIN IncrementAttackCount to battle proc loop
*/

// Battle Struct: Changing STRB on 0x7E to STRH to also clear 0x7F
PUSH
ORG 0x1D1E6
SHORT $8001
ORG 0x322C4
SHORT $800A
POP

/*
Add to Popups.event

PopRBattlePopup(PopR_InitEquipmentBroke, 0x592420, 96)
*/

PUSH
ORG 0x2C1EC
jumpToHack(New_SaveUnitFromBattle)
PROTECT 0x2C1EC
POP

PUSH
ORG 0x2A584
jumpToHack(New_InitBattleUnitFromUnit)
PROTECT 0x2A584
POP

ALIGN 4
gSkillTester:
POIN SkillTester+1

#include "_UnitMenuDefs.event"
#include "_ItemUnitMenuDefs.event"

/*
add these text entries

## EquipEquipmentDescription
Ready this equipment.[X]

## UnequipName
Unequip[X]

## UnequipEquipmentDescription
Remove this equipment.[X]

*/

ALIGN 4
ItemUnitMenu:

IUM_Use
IUM_Equip
MenuCommand($697, EquipEquipmentDescription, GreenText, EquipEquipmentUsability, EquipEquipment)
MenuCommand(UnequipName, UnequipEquipmentDescription, GreenText, UnequipEquipmentUsability, UnequipEquipment)
IUM_Trade
IUM_Discard
UM_Separator

PUSH
ORG $59D120
POIN ItemUnitMenu
POP

#include "Equipment.event"

//////////////////
// Extra Growths//
//////////////////

/*
ALIGN 4
#include "ExtraGrowths.lyn.event"
*/

PUSH
ORG 0x2BA28
jumpToHack(New_WriteGrowthsToBattleStruct)
PROTECT 0x2BA28
POP

ALIGN 4
gExtra_Growth_Boosts:
POIN Extra_Growth_Boosts|1

gGetHPGrowth:
POIN Get_Hp_Growth|1

gGetStrGrowth:
POIN Get_Str_Growth|1

gGetSklGrowth:
POIN Get_Skl_Growth|1

gGetSpdGrowth:
POIN Get_Spd_Growth|1

gGetDefGrowth:
POIN Get_Def_Growth|1

gGetResGrowth:
POIN Get_Res_Growth|1

gGetLukGrowth:
POIN Get_Luk_Growth|1

gGetMagGrowth:
POIN Get_Mag_Growth|1

//SynchronizeIDLink:
//BYTE SynchronizeID

ALIGN 4
FixedGrowthsFlagIDLink:
BYTE FIXED_GROWTHS_FLAG_ID

ALIGN 4
CharacterMovGrowthTable:
#include "CharacterMovGrowthTable.event"

ALIGN 4
CharacterConGrowthTable:
#include "CharacterConGrowthTable.event"

#define SetUnitMovGrowth(unit, growth) "PUSH; ORG CharacterMovGrowthTable + unit; BYTE growth; POP"
#define SetUnitConGrowth(unit, growth) "PUSH; ORG CharacterConGrowthTable + unit; BYTE growth; POP"

/*
In StrMagSplit/StrMagSplit/LevelUp/LevelUp.event...
Add GetConGrowthAnimsOff and GetMovGrowthAnimsOff to New_Stats_Jump_Table (replace old functions)
Add SHORT 0x46C0; jumpToHack(WriteNewGrowthsToRAMAnimStruct) after "#incbin "WritePromotoRAM.dmp" (replace old SHORT)
*/

/*
Make sure to #define ExpandedLevelUpScreen
*/

/*
// mokha's fix for level up screen related issues

PUSH
	ORG 	$7EF18
	SHORT	$2332	// mov r3,#0x32
	SHORT	$021B	// lsl r3, #8
	SHORT	0 0
	
	ORG $7F2A0
	// ldr at $7F1F6
	// y-Pos start
	// when put LevelUpScreen on screen
	WORD $FF80	
	
	ORG $7F382
	// Set y-Pos end (-0x80=0xFF70 in Vanilla)
	// when put LevelUpScreen off screen
	SHORT $2080 // mov r0,#0x80
POP
*/